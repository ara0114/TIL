1. 협업을 위한 작업
(1) 팀장 
- 팀 프로젝트 생성
- github 원격 저장소 생성
- 지역저장소 생성
  프로젝트 폴더 선택후 Git Bash Here
 $git init
 $git config user.name  "사용자 이름"
 $git config user.email  "이메일 주소"
 $cat .git/config

- 원격주소 복사 후 원격주소 git에 등록
 $git remote add origin {복사한 원격 저장소 주소}
- 원격정보 확인
 $cat .git/config 

- .gitignore파일 설정 및 README.md 파일 작성
>>> Spring boot -> .gitignore
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/
### STS ###
.apt_generated
.factorypath
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/
### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/
### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
### VS Code ###
.vscode/

- 스테이징영역 등록 및 지역저장소에 등록
$ git add .
$ git status
$ git commit -m "간단한 메세지"
$ git log

- 원격저장소에 등록
$git push origin master

- 깃허브에 협업자 등록
- 원격 저장소 메인페이지의 [Settings] 탭을 선택한다.
- [Settings] -> [collaborators] 선택한다.
- 패스워드 확인창이 뜨면. 입력하고 진행한다.
- [Manage access] -> [add people] -> 팀원 계정(메일)으로 검색 후
  [Add 계정 to this repository] 선택하여 등록한다.



- 프로젝트 보드를 생성한다 프로젝트 template는 Auto Kanban으로 선택

(2) 모든 팀원

- 팀원들은 메일로 온 초대에 응하면 프로젝트가 있는 github 원격저장소를
  확인할 수 있다.

- 원격저장소 주소 복사 후 원격저장소의 프로젝트를 가져온다. 
- aistudy/final_project/projects
- 생성한 폴더에서 Git Bash 선택한다.
  git clone '원격 저장소 주소' '프로젝트명'

 $ git clone 'https://github.com/nosqljava/shopping.git' 'shopping'

 - 생성된 폴더로 이동하여 복제된 내용확인
 $ pwd
 $ cd shopping
 $ ls -a

- 팀원들의 기능을 [Issues]에 등록한다. 
- label를 operation으로 생성하여 Issues에 등록한다.

 - project이름 오른쪽 마우스 -> git bash에서 확인
 - 현재 작업중인 브랜치 확인(main)
 $ git branch -l 
 - 브랜치 생성 (dev_1, dev_2), git branch {새로운브랜치명}
 $ git branch dev_1
 $ git branch -a
 
 - 새로운 브랜치를 작업브랜치로 변경
 $ git checkout dev_1
 $ git branch -l 

 - 지역에서 만든 브랜치를 원격저장소에 반영한다
 $ git push origin dev_1

 - 갱신된 브랜치 확인
 $ git branch -a

 - 작업하고 -> 스테이징 영역 등록 -> 지역저장소 등록 -> 원격저장소 등록
 $ git config user.name ""
 $ git config user.email ""
 $ git add .
 $ git status
 $ git commit -m "간단한 메세지"
 $ git log --pretty=oneline --graph

 - 병합 
 - 빨리감기 병합:fast forward, main브랜치에 병합시 main 브랜치에
   새로운 커밋이 없다면 빨리감기 병합으로 진행된다.
 $ git checkout main
 $ git log --pretty=oneline --graph
 - main으로 병합
 $ git merge dev_1
 $ git log --pretty=oneline --graph

- 병합 커밋생성 : merge commit , 기준 브랜치(main)에 변경이 존재
  하는 경우, 기준브랜치와 새로운 작업 브랜치의 변경 내용을 
  하나로 합치는 작업이 필요하다.(Auto-merging)
 
============================================

 $git checkout dev_2
- 내용수정 후
 $ git add .
 $ git status
 $ git commit -m "간단한 메세지"
 $ git log --pretty=oneline --graph

 $ git checkout main
 $ git log --pretty=oneline --graph
 - main으로 병합
 $ git merge dev_2
 $ git log --pretty=oneline --graph

- 원격 main으로 병합
$ git push origin main 
$ git log --pretty=oneline --graph


- 병합 충돌해결 
- 충돌이란 깃이 자동으로 병합을 완료할 수 없는 상황을 말한다.
- 깃 입장에서는 두 브랜치가 같은 파일의 동일한 코드를 수정했기 
  어떤 변경 내용을 최종적으로 반영해야 하는지 알 수 없다.

- 다른 project이름 오른쪽 마우스 -> git bash에서 확인
 - 현재 작업중인 브랜치 확인(main)
 $ git branch -l 
 - 브랜치 생성 (dev_3), git branch {새로운브랜치명}
 $ git branch dev_3
 $ git branch -a
 
 - 새로운 브랜치를 작업브랜치로 변경
 $ git checkout dev_3
 $ git branch -l 

 - 지역에서 만든 브랜치를 원격저장소에 반영한다
 $ git push origin dev_3

 - 갱신된 브랜치 확인
 $ git branch -a

 - 작업하고 -> 스테이징 영역 등록 -> 지역저장소 등록 -> 원격저장소 등록
 $ git config user.name ""
 $ git config user.email ""
 $ git add .
 $ git status
 $ git commit -m "간단한 메세지"
 $ git log --pretty=oneline --graph

$ git checkout main
 $ git log --pretty=oneline --graph
 - main으로 병합
 $ git merge dev_3
 $ git log --pretty=oneline --graph

============================================

- 원격 dev_1,main으로 병합
$ git push origin dev_1
$ git push origin main 
$ git log --pretty=oneline --graph

- 충돌된 파일 확인하여 <<<<< HEAD ... =====>>>> dev_3
  이부분을 지우고 저장한다.

 $ git add .
 $ git commit -m ""
 $ git checkout main
 $ git log --pretty=oneline --graph
 - main으로 병합
 $ git merge dev_1
 $ git log --pretty=oneline --graph

- 원격 dev_1, main으로 병합
$ git push origin dev_1
$ git push origin main 
$ git log --pretty=oneline --graph

[참고] 브랜치 삭제
- 지역저장소 브랜치 삭제
  git branch -d {브랜치명}

- 원격 저장소의 브랜치 삭제
  git push origin -d {브랜치명}

- 원격 저장소 최신내역을 지역저장소 브랜치에 반영하기
- 원격 저장소의 변경내역을 가져와서 지역 저장소의 작업 브랜치에
  병합까지 완료 합니다.
$ git checkout 브랜치명
$ git pull {원격 저장소 식별자} {원격 저장소 브랜치}
